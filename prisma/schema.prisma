generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[] @relation("UserProjects")
  bookmarks     Project[] @relation("UserBookmarks")
  userDetails   UserDetails?

  @@map("users")
  UserProjectBookmarks UserProjectBookmarks[]
  Portfolios Portfolios[]
}


model UserDetails {
  userId       String   @id
  user         User     @relation(fields: [userId], references: [id])
  twitter      String?  // Optional Twitter link
  github       String?  // Optional GitHub link
  portfolio    String?  // Optional portfolio link
  bio          String?  // Optional user bio
}


model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  liveLink    String?
  githubLink  String
  public      Boolean  @default(true)
  createdBy   User     @relation("UserProjects", fields: [userId], references: [id])
  userId      String
  tags        Tag[]    @relation("ProjectTags")
  bookmarkedBy User[]  @relation("UserBookmarks")

  @@map("projects")
  UserProjectBookmarks UserProjectBookmarks[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[] @relation("ProjectTags")

  @@map("tags")
}

model UserProjectBookmarks {
  userId    String
  projectId Int
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
  @@map("user_project_bookmarks")
}

model Portfolios {
  id Int @id @default(autoincrement())
  githubLink String
  portfolioLink String
  uploadedBy User? @relation(fields: [userId], references: [id])
  userId String?
  
  @@map("portfolios")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
